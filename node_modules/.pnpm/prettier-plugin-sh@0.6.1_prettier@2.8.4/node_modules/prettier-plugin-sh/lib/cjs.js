'use strict';

var sh = require('mvdan-sh');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var sh__default = /*#__PURE__*/_interopDefaultLegacy(sh);

var languages = [
    {
        "name": "Alpine Abuild",
        "parsers": [
            "sh"
        ],
        "group": "Shell",
        "aliases": [
            "abuild",
            "apkbuild"
        ],
        "filenames": [
            "APKBUILD"
        ],
        "tmScope": "source.shell",
        "aceMode": "sh",
        "codemirrorMode": "shell",
        "codemirrorMimeType": "text/x-sh",
        "linguistLanguageId": 14,
        "vscodeLanguageIds": [
            "shellscript"
        ]
    },
    {
        "name": "Altium Designer",
        "parsers": [
            "sh"
        ],
        "aliases": [
            "altium"
        ],
        "extensions": [
            ".OutJob",
            ".PcbDoc",
            ".PrjPCB",
            ".SchDoc"
        ],
        "tmScope": "source.ini",
        "aceMode": "ini",
        "linguistLanguageId": 187772328,
        "vscodeLanguageIds": [
            "ini"
        ]
    },
    {
        "name": "CODEOWNERS",
        "parsers": [
            "sh"
        ],
        "filenames": [
            "CODEOWNERS"
        ],
        "tmScope": "text.codeowners",
        "aceMode": "gitignore",
        "linguistLanguageId": 321684729,
        "vscodeLanguageIds": [
            "gitignore"
        ]
    },
    {
        "name": "Dockerfile",
        "parsers": [
            "sh"
        ],
        "extensions": [
            ".dockerfile"
        ],
        "filenames": [
            "Dockerfile"
        ],
        "tmScope": "source.dockerfile",
        "aceMode": "dockerfile",
        "codemirrorMode": "dockerfile",
        "codemirrorMimeType": "text/x-dockerfile",
        "linguistLanguageId": 89,
        "vscodeLanguageIds": [
            "dockerfile"
        ]
    },
    {
        "name": "EditorConfig",
        "parsers": [
            "sh"
        ],
        "group": "INI",
        "aliases": [
            "editor-config"
        ],
        "filenames": [
            ".editorconfig"
        ],
        "tmScope": "source.editorconfig",
        "aceMode": "ini",
        "codemirrorMode": "properties",
        "codemirrorMimeType": "text/x-properties",
        "linguistLanguageId": 96139566,
        "vscodeLanguageIds": [
            "ini"
        ]
    },
    {
        "name": "Gentoo Ebuild",
        "parsers": [
            "sh"
        ],
        "group": "Shell",
        "extensions": [
            ".ebuild"
        ],
        "tmScope": "source.shell",
        "aceMode": "sh",
        "codemirrorMode": "shell",
        "codemirrorMimeType": "text/x-sh",
        "linguistLanguageId": 127,
        "vscodeLanguageIds": [
            "shellscript"
        ]
    },
    {
        "name": "Gentoo Eclass",
        "parsers": [
            "sh"
        ],
        "group": "Shell",
        "extensions": [
            ".eclass"
        ],
        "tmScope": "source.shell",
        "aceMode": "sh",
        "codemirrorMode": "shell",
        "codemirrorMimeType": "text/x-sh",
        "linguistLanguageId": 128,
        "vscodeLanguageIds": [
            "shellscript"
        ]
    },
    {
        "name": "Git Attributes",
        "parsers": [
            "sh"
        ],
        "group": "INI",
        "aliases": [
            "gitattributes"
        ],
        "filenames": [
            ".gitattributes"
        ],
        "tmScope": "source.gitattributes",
        "aceMode": "gitignore",
        "codemirrorMode": "shell",
        "codemirrorMimeType": "text/x-sh",
        "linguistLanguageId": 956324166,
        "vscodeLanguageIds": [
            "gitignore"
        ]
    },
    {
        "name": "Git Config",
        "parsers": [
            "sh"
        ],
        "group": "INI",
        "aliases": [
            "gitconfig",
            "gitmodules"
        ],
        "extensions": [
            ".gitconfig"
        ],
        "filenames": [
            ".gitconfig",
            ".gitmodules"
        ],
        "tmScope": "source.gitconfig",
        "aceMode": "ini",
        "codemirrorMode": "properties",
        "codemirrorMimeType": "text/x-properties",
        "linguistLanguageId": 807968997,
        "vscodeLanguageIds": [
            "ini"
        ]
    },
    {
        "name": "INI",
        "parsers": [
            "sh"
        ],
        "aliases": [
            "dosini"
        ],
        "extensions": [
            ".ini",
            ".cfg",
            ".dof",
            ".lektorproject",
            ".prefs",
            ".pro",
            ".properties"
        ],
        "filenames": [
            "buildozer.spec"
        ],
        "tmScope": "source.ini",
        "aceMode": "ini",
        "codemirrorMode": "properties",
        "codemirrorMimeType": "text/x-properties",
        "linguistLanguageId": 163,
        "vscodeLanguageIds": [
            "ini"
        ]
    },
    {
        "name": "Ignore List",
        "parsers": [
            "sh"
        ],
        "group": "INI",
        "aliases": [
            "ignore",
            "gitignore",
            "git-ignore"
        ],
        "extensions": [
            ".gitignore"
        ],
        "filenames": [
            ".atomignore",
            ".babelignore",
            ".bzrignore",
            ".coffeelintignore",
            ".cvsignore",
            ".dockerignore",
            ".eleventyignore",
            ".eslintignore",
            ".gitignore",
            ".nodemonignore",
            ".npmignore",
            ".prettierignore",
            ".stylelintignore",
            ".vscodeignore",
            "gitignore-global",
            "gitignore_global"
        ],
        "tmScope": "source.gitignore",
        "aceMode": "gitignore",
        "codemirrorMode": "shell",
        "codemirrorMimeType": "text/x-sh",
        "linguistLanguageId": 74444240,
        "vscodeLanguageIds": [
            "gitignore"
        ]
    },
    {
        "name": "Java Properties",
        "parsers": [
            "sh"
        ],
        "extensions": [
            ".properties"
        ],
        "tmScope": "source.java-properties",
        "aceMode": "properties",
        "codemirrorMode": "properties",
        "codemirrorMimeType": "text/x-properties",
        "linguistLanguageId": 519377561,
        "vscodeLanguageIds": [
            "properties"
        ]
    },
    {
        "name": "OpenRC runscript",
        "parsers": [
            "sh"
        ],
        "group": "Shell",
        "aliases": [
            "openrc"
        ],
        "interpreters": [
            "openrc-run"
        ],
        "tmScope": "source.shell",
        "aceMode": "sh",
        "codemirrorMode": "shell",
        "codemirrorMimeType": "text/x-sh",
        "linguistLanguageId": 265,
        "vscodeLanguageIds": [
            "shellscript"
        ]
    },
    {
        "name": "Shell",
        "parsers": [
            "sh"
        ],
        "aliases": [
            "sh",
            "shell-script",
            "bash",
            "zsh"
        ],
        "extensions": [
            ".sh",
            ".bash",
            ".bats",
            ".cgi",
            ".command",
            ".env",
            ".fcgi",
            ".ksh",
            ".sh.in",
            ".tmux",
            ".tool",
            ".zsh"
        ],
        "filenames": [
            ".bash_aliases",
            ".bash_history",
            ".bash_logout",
            ".bash_profile",
            ".bashrc",
            ".cshrc",
            ".env",
            ".env.example",
            ".flaskenv",
            ".login",
            ".profile",
            ".zlogin",
            ".zlogout",
            ".zprofile",
            ".zshenv",
            ".zshrc",
            "9fs",
            "PKGBUILD",
            "bash_aliases",
            "bash_logout",
            "bash_profile",
            "bashrc",
            "cshrc",
            "gradlew",
            "login",
            "man",
            "profile",
            "zlogin",
            "zlogout",
            "zprofile",
            "zshenv",
            "zshrc"
        ],
        "interpreters": [
            "ash",
            "bash",
            "dash",
            "ksh",
            "mksh",
            "pdksh",
            "rc",
            "sh",
            "zsh"
        ],
        "tmScope": "source.shell",
        "aceMode": "sh",
        "codemirrorMode": "shell",
        "codemirrorMimeType": "text/x-sh",
        "linguistLanguageId": 346,
        "vscodeLanguageIds": [
            "shellscript"
        ]
    },
    {
        "name": "ShellSession",
        "parsers": [
            "sh"
        ],
        "aliases": [
            "bash session",
            "console"
        ],
        "extensions": [
            ".sh-session"
        ],
        "tmScope": "text.shell-session",
        "aceMode": "sh",
        "codemirrorMode": "shell",
        "codemirrorMimeType": "text/x-sh",
        "linguistLanguageId": 347,
        "vscodeLanguageIds": [
            "shellscript"
        ]
    },
    {
        "name": "Tcsh",
        "parsers": [
            "sh"
        ],
        "group": "Shell",
        "extensions": [
            ".tcsh",
            ".csh"
        ],
        "interpreters": [
            "tcsh",
            "csh"
        ],
        "tmScope": "source.shell",
        "aceMode": "sh",
        "codemirrorMode": "shell",
        "codemirrorMimeType": "text/x-sh",
        "linguistLanguageId": 368,
        "vscodeLanguageIds": [
            "shellscript"
        ]
    },
    {
        "name": "Windows Registry Entries",
        "parsers": [
            "sh"
        ],
        "extensions": [
            ".reg"
        ],
        "tmScope": "source.reg",
        "aceMode": "ini",
        "codemirrorMode": "properties",
        "codemirrorMimeType": "text/x-properties",
        "linguistLanguageId": 969674868,
        "vscodeLanguageIds": [
            "ini"
        ]
    },
    {
        "name": "JvmOptions",
        "parsers": [
            "sh"
        ],
        "extensions": [
            ".vmoptions"
        ],
        "filenames": [
            "jvm.options"
        ],
        "vscodeLanguageIds": [
            "jvmoptions"
        ]
    },
    {
        "name": "hosts",
        "parsers": [
            "sh"
        ],
        "filenames": [
            "hosts"
        ],
        "vscodeLanguageIds": [
            "hosts"
        ]
    },
    {
        "name": "dotenv",
        "parsers": [
            "sh"
        ],
        "extensions": [
            ".env"
        ],
        "filenames": [
            ".env.*"
        ],
        "vscodeLanguageIds": [
            "dotenv"
        ]
    }
];

var syntax = sh__default['default'].syntax;
var index = {
    name: 'prettier-plugin-sh',
    languages: languages,
    parsers: {
        sh: {
            parse: function (text, _parsers, _a) {
                var filepath = _a.filepath, _b = _a.keepComments, keepComments = _b === void 0 ? true : _b, stopAt = _a.stopAt, variant = _a.variant;
                var parserOptions = [syntax.KeepComments(keepComments)];
                if (stopAt != null) {
                    parserOptions.push(syntax.StopAt(stopAt));
                }
                if (variant != null) {
                    parserOptions.push(syntax.Variant(variant));
                }
                try {
                    return syntax.NewParser.apply(syntax, parserOptions).Parse(text, filepath);
                }
                catch (e) {
                    var err = e;
                    throw Object.assign(new SyntaxError(err.Text), {
                        loc: {
                            start: {
                                column: err.Pos.Col(),
                                line: err.Pos.Line(),
                            },
                        },
                    });
                }
            },
            astFormat: 'sh',
            locStart: function (node) { return node.Pos().Offset(); },
            locEnd: function (node) { return node.End().Offset(); },
        },
    },
    printers: {
        sh: {
            print: function (path, _a) {
                var useTabs = _a.useTabs, tabWidth = _a.tabWidth, _b = _a.indent, indent = _b === void 0 ? useTabs ? 0 : tabWidth : _b, _c = _a.binaryNextLine, binaryNextLine = _c === void 0 ? true : _c, switchCaseIndent = _a.switchCaseIndent, spaceRedirects = _a.spaceRedirects, keepPadding = _a.keepPadding, minify = _a.minify, functionNextLine = _a.functionNextLine;
                return syntax
                    .NewPrinter(syntax.Indent(indent), syntax.BinaryNextLine(binaryNextLine), syntax.SwitchCaseIndent(switchCaseIndent), syntax.SpaceRedirects(spaceRedirects), syntax.KeepPadding(keepPadding), syntax.Minify(minify), syntax.FunctionNextLine(functionNextLine))
                    .Print(path.getValue());
            },
        },
    },
};

module.exports = index;
