import sh from 'mvdan-sh';
import { languages } from './languages';
const { syntax } = sh;
export default {
    name: 'prettier-plugin-sh',
    languages,
    parsers: {
        sh: {
            parse: (text, _parsers, { filepath, keepComments = true, stopAt, variant }) => {
                const parserOptions = [syntax.KeepComments(keepComments)];
                if (stopAt != null) {
                    parserOptions.push(syntax.StopAt(stopAt));
                }
                if (variant != null) {
                    parserOptions.push(syntax.Variant(variant));
                }
                try {
                    return syntax.NewParser(...parserOptions).Parse(text, filepath);
                }
                catch (e) {
                    const err = e;
                    throw Object.assign(new SyntaxError(err.Text), {
                        loc: {
                            start: {
                                column: err.Pos.Col(),
                                line: err.Pos.Line(),
                            },
                        },
                    });
                }
            },
            astFormat: 'sh',
            locStart: (node) => node.Pos().Offset(),
            locEnd: (node) => node.End().Offset(),
        },
    },
    printers: {
        sh: {
            print: (path, { useTabs, tabWidth, indent = useTabs ? 0 : tabWidth, binaryNextLine = true, switchCaseIndent, spaceRedirects, keepPadding, minify, functionNextLine, }) => syntax
                .NewPrinter(syntax.Indent(indent), syntax.BinaryNextLine(binaryNextLine), syntax.SwitchCaseIndent(switchCaseIndent), syntax.SpaceRedirects(spaceRedirects), syntax.KeepPadding(keepPadding), syntax.Minify(minify), syntax.FunctionNextLine(functionNextLine))
                .Print(path.getValue()),
        },
    },
};
//# sourceMappingURL=index.js.map