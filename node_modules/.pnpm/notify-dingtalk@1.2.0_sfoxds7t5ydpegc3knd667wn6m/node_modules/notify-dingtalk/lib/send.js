"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.send = send;

var _crypto = _interopRequireDefault(require("crypto"));

var _got = _interopRequireDefault(require("got"));

/**
 * @see https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq/9e91d73c
 */
async function send({
  accessToken = process.env.D_ACCESS_TOKEN,
  secret = process.env.D_SECRET,
  title,
  content,
  at
}) {
  if (!accessToken) {
    throw new Error('accessToken 不能为空');
  }

  if (!secret) {
    throw new Error('secret 不能为空');
  }

  const timestamp = Date.now();

  const sign = _crypto.default.createHmac('sha256', secret).update(`${timestamp}\n${secret}`).digest('base64');

  const data = {
    msgtype: 'markdown',
    markdown: {
      title: title,
      text: content
    },
    at: {
      atMobiles: Array.isArray(at) ? at : [],
      isAtAll: at === 'all'
    }
  };

  if (!data.at.isAtAll && data.at.atMobiles.length) {
    const atMobiles = data.at.atMobiles.filter(mobile => !data.markdown.text.includes(`@${mobile}`));

    if (atMobiles.length) {
      const atMobilesText = atMobiles.map(mobile => `@${mobile}`).join(' ');
      data.markdown.text += `<!-- ${atMobilesText} -->`;
    }
  }

  const {
    body
  } = await _got.default.post('https://oapi.dingtalk.com/robot/send', {
    responseType: 'json',
    searchParams: {
      access_token: accessToken,
      timestamp: timestamp,
      sign: sign
    },
    json: data
  });

  if (body.errcode !== 0) {
    throw new Error(`[notify-dingtalk@send] ${body.errmsg}`);
  }

  return body;
}