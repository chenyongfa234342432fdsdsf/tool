"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProcessCssPlugin = void 0;
const tslib_1 = require("tslib");
const cuid_1 = tslib_1.__importDefault(require("cuid"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const less_1 = tslib_1.__importDefault(require("less"));
const postcss_1 = tslib_1.__importDefault(require("postcss"));
const sass_1 = tslib_1.__importDefault(require("sass"));
const path_1 = require("path");
function getProcessCssPlugin(options) {
    return function processCssPlugin({ types: t, }) {
        return {
            visitor: {
                ImportDeclaration: {
                    exit(path, state) {
                        const modulePath = path.node.source.value;
                        const moduleExt = path_1.extname(modulePath);
                        const isCssModule = moduleExt === '.css';
                        const isScssModule = moduleExt === '.scss';
                        const isLessModule = moduleExt === '.less';
                        if ((isCssModule || isScssModule || isLessModule) &&
                            modulePath.startsWith('.')) {
                            const isCssModules = path.node.specifiers.length > 0;
                            let cssModulesMap = {};
                            const moduleId = `__${getProcessCssPlugin.name}_${cuid_1.default()}__`;
                            path.node.source.value += `?${moduleId}`;
                            if (isCssModules) {
                                path.insertAfter(t.variableDeclaration('var', [
                                    t.variableDeclarator(t.identifier(path.node.specifiers[0].local.name), t.stringLiteral(moduleId)),
                                ]));
                                path.node.specifiers = [];
                            }
                            const moduleAbsolutePath = path_1.join(path_1.dirname(state.filename), modulePath);
                            const outFile = path_1.join(options.outDir, moduleAbsolutePath
                                .replace(options.projectRoot, '')
                                .replace(/\.[^.]+$/, '.css'));
                            const processCss = async () => {
                                let outContent = await fs_extra_1.default.readFile(moduleAbsolutePath, 'utf8');
                                if (isScssModule) {
                                    outContent = await new Promise((resolve, reject) => {
                                        sass_1.default.render({
                                            data: outContent,
                                            file: moduleAbsolutePath,
                                            sourceMap: false,
                                        }, (err, res) => err ? reject(err) : resolve(res.css.toString()));
                                    });
                                }
                                else if (isLessModule) {
                                    outContent = await new Promise((resolve, reject) => {
                                        less_1.default.render(outContent, {
                                            filename: moduleAbsolutePath,
                                        }, (err, res) => err || !res ? reject(err) : resolve(res.css));
                                    });
                                }
                                outContent = await postcss_1.default([
                                    require('autoprefixer'),
                                    ...(isCssModules
                                        ? [
                                            require('postcss-modules')({
                                                getJSON: (_, json) => (cssModulesMap = json),
                                                ...(options.getCssModulesScopedName
                                                    ? {
                                                        generateScopedName: (name, filename) => options.getCssModulesScopedName({
                                                            className: name,
                                                            fileName: filename,
                                                        }),
                                                    }
                                                    : {}),
                                            }),
                                        ]
                                        : []),
                                ])
                                    .process(outContent, {
                                    from: moduleAbsolutePath,
                                    map: false,
                                })
                                    .then(res => res.css);
                                await fs_extra_1.default.outputFile(outFile, outContent);
                            };
                            const processCssResult = processCss();
                            options.bus.emit('addAfterWriteTransformer', async (content) => {
                                await processCssResult;
                                return content
                                    .replace(`${moduleExt}?${moduleId}`, '.css')
                                    .replace(`"${moduleId}"`, JSON.stringify(cssModulesMap));
                            });
                        }
                    },
                },
            },
        };
    };
}
exports.getProcessCssPlugin = getProcessCssPlugin;
