"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compile = void 0;
const tslib_1 = require("tslib");
// @ts-ignore
const common_dir_1 = tslib_1.__importDefault(require("common-dir"));
const babel = tslib_1.__importStar(require("@babel/core"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const delete_empty_1 = tslib_1.__importDefault(require("delete-empty"));
const execa_1 = tslib_1.__importDefault(require("execa"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const globby_1 = tslib_1.__importDefault(require("globby"));
const ora_1 = tslib_1.__importDefault(require("ora"));
const rimraf_1 = tslib_1.__importDefault(require("rimraf"));
const workerpool_1 = tslib_1.__importDefault(require("workerpool"));
const vtils_1 = require("vtils");
const getBabelConfig_1 = require("./getBabelConfig");
const path_1 = require("path");
async function compile(config) {
    const startTime = Date.now();
    const { name, inputFiles, outDir, emitDts, rollupDts, rollupDtsFiles = ['index.d.ts'], rollupDtsExcludeFiles = [], rollupDtsIncludedPackages = [], clean, ...babelConfig } = config;
    const spinner = ora_1.default({
        prefixText: `[${name}]: `,
    });
    if (!inputFiles.length) {
        spinner.fail('输入文件列表为空！');
        return;
    }
    spinner.start('编译中...');
    if (clean !== false) {
        spinner.text = '清空输出目录...';
        await new Promise(resolve => rimraf_1.default(outDir, {
            disableGlob: true,
        }, resolve));
    }
    spinner.text = '编译文件...';
    const inputDir = common_dir_1.default(inputFiles);
    const tsFiles = [];
    await Promise.all(inputFiles.map(async (file) => {
        var _a;
        const outFile = path_1.join(outDir, file.replace(inputDir, '').replace(/\.[^.]+$/, '.js'));
        const code = await fs_extra_1.default.readFile(file, 'utf8');
        const isTs = /\.tsx?/i.test(file);
        if (isTs) {
            tsFiles.push(file);
        }
        const afterWriteTransformers = [];
        const bus = new vtils_1.EventBus();
        bus.on('addAfterWriteTransformer', transformer => afterWriteTransformers.push(transformer));
        const res = await babel.transformAsync(code, getBabelConfig_1.getBabelConfig({
            ...babelConfig,
            legacyDecorator: (_a = babelConfig.legacyDecorator) !== null && _a !== void 0 ? _a : true,
            filename: file,
            projectRoot: inputDir,
            outDir: outDir,
            bus: bus,
        }));
        let content = (res === null || res === void 0 ? void 0 : res.code) || '';
        for (const transformer of afterWriteTransformers) {
            content = await transformer(content);
        }
        await fs_extra_1.default.outputFile(outFile, content);
    }));
    if (emitDts !== false && tsFiles.length) {
        spinner.text = '生成类型文件...';
        await execa_1.default('node', [
            require.resolve('typescript').replace(/typescript\.js$/, 'tsc.js'),
            '--declaration',
            '--emitDeclarationOnly',
            '--skipLibCheck',
            '--esModuleInterop',
            '--allowSyntheticDefaultImports',
            '--target',
            'ESNext',
            '--moduleResolution',
            'node',
            '--jsx',
            'preserve',
            '--outDir',
            outDir,
            ...tsFiles,
        ], {
            cwd: process.cwd(),
            stdio: 'inherit',
        });
        if (rollupDts) {
            spinner.text = '打包类型文件...';
            const _rollupDtsFiles = await globby_1.default(rollupDtsFiles, {
                cwd: outDir,
                absolute: true,
                ignore: rollupDtsExcludeFiles,
            });
            const pool = workerpool_1.default.pool(require.resolve('./rollupDts'));
            await pool.exec('rollupDts', [_rollupDtsFiles, rollupDtsIncludedPackages]);
            await pool.terminate();
            const scrappedDtsFiles = await globby_1.default('**/*.d.ts', {
                cwd: outDir,
                absolute: true,
                ignore: [...rollupDtsFiles, ...rollupDtsExcludeFiles],
            });
            await Promise.all(scrappedDtsFiles.map(file => fs_extra_1.default.remove(file)));
        }
    }
    spinner.text = '删除空文件夹...';
    await delete_empty_1.default(outDir);
    const endTime = Date.now();
    spinner.succeed(`编译完成，用时 ${chalk_1.default.green(((endTime - startTime) / 1000).toFixed(1))} 秒`);
}
exports.compile = compile;
