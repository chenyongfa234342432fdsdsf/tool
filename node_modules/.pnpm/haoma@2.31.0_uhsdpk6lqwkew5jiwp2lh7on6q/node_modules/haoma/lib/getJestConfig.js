"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getJestConfig = void 0;
const tslib_1 = require("tslib");
require("./jestSetup");
const json5_1 = tslib_1.__importDefault(require("json5"));
const deepmerge_1 = tslib_1.__importDefault(require("deepmerge"));
const vtils_1 = require("vtils");
const fs_1 = require("fs");
const path_1 = require("path");
function getJestConfig(customConfig = {}, projectRoot = process.cwd()) {
    var _a;
    process.env.JSX_PRAGMA = (_a = customConfig.jsxPragma) !== null && _a !== void 0 ? _a : 'React';
    const paths = [
        path_1.join(__dirname, '../node_modules'),
        path_1.join(projectRoot, 'node_modules'),
    ];
    const normalizeFilePath = (filePath) => {
        const relativeFilePath = path_1.relative(projectRoot, filePath).replace(/\\/g, '/');
        return (/^[.]+\//.test(relativeFilePath)
            ? relativeFilePath
            : `./${relativeFilePath}`).replace(/\/{2,}/g, '/');
    };
    const transformIgnorePatterns = customConfig.transformPackages && customConfig.transformPackages.length > 0
        ? [
            `<rootDir>/node_modules/(?!.*/(${customConfig.transformPackages
                .map(pkg => vtils_1.escapeRegExp(pkg))
                .join('|')})/)`,
        ]
        : ['<rootDir>/node_modules/'];
    return deepmerge_1.default({
        rootDir: projectRoot,
        transform: customConfig.transformer === 'typescript+babel'
            ? {
                '^.+\\.tsx?$': require.resolve('ts-jest'),
                '^.+\\.jsx?$': normalizeFilePath(require.resolve('./jestJavaScriptTransform')),
            }
            : customConfig.transformer === 'swc'
                ? (() => {
                    const tsConfigFile = path_1.join(projectRoot, './tsconfig.json');
                    const tsConfig = fs_1.existsSync(tsConfigFile)
                        ? json5_1.default.parse(fs_1.readFileSync(tsConfigFile, 'utf8'))
                        : {};
                    const compilerOptions = tsConfig.compilerOptions || {};
                    return {
                        '^.+\\.(t|j)sx?$': [
                            require.resolve('@swc-node/jest'),
                            {
                                dynamicImport: true,
                                experimentalDecorators: Boolean(compilerOptions.experimentalDecorators),
                                emitDecoratorMetadata: Boolean(compilerOptions.emitDecoratorMetadata),
                            },
                        ],
                    };
                })()
                : {
                    '^.+\\.[j|t]sx?$': normalizeFilePath(require.resolve('./jestJavaScriptTransform')),
                },
        transformIgnorePatterns: [
            ...transformIgnorePatterns,
            ...(customConfig.transformIgnorePatterns || []),
        ],
        moduleNameMapper: {
            '\\.(css|less|scss|sass|styl|md|html|jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$': require.resolve('identity-obj-proxy'),
        },
        globals: customConfig.transformer === 'typescript+babel'
            ? {
                'ts-jest': {
                    packageJson: path_1.join(projectRoot, './package.json'),
                    // 优先使用 tsconfig.test.json
                    tsConfig: fs_1.existsSync(path_1.join(projectRoot, './tsconfig.test.json'))
                        ? path_1.join(projectRoot, './tsconfig.test.json')
                        : path_1.join(projectRoot, './tsconfig.json'),
                },
            }
            : {},
        collectCoverageFrom: [
            '<rootDir>/src/**/*.{ts,tsx}',
            '!<rootDir>/src/**/__*__/**/*',
            '!<rootDir>/src/**/*.test.*',
        ],
        setupFilesAfterEnv: [normalizeFilePath(require.resolve('./jestSetup'))],
        snapshotSerializers: [
            // 使用函数名称作为快照
            normalizeFilePath(require.resolve('jest-snapshot-serializer-function-name/index.js', {
                paths,
            })),
            // 漂亮的 html 快照
            normalizeFilePath(require.resolve('jest-serializer-html/index.js', { paths })),
            // 移除 jest 包裹在 diff 快照两边的引号
            normalizeFilePath(require.resolve('snapshot-diff/serializer.js', { paths })),
        ],
        cacheDirectory: '<rootDir>/node_modules/.cache/jest',
    }, vtils_1.omitStrict(customConfig, ['transformPackages', 'transformer', 'jsxPragma']));
}
exports.getJestConfig = getJestConfig;
