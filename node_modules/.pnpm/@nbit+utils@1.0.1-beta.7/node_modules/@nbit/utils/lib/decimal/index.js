'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Decimal = require('decimal.js');
var lodash = require('lodash');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Decimal__default = /*#__PURE__*/_interopDefaultLegacy(Decimal);

/**
 * 设置精度位 - 最大有效字位数
 * @param val
 */
function setPrecision(val) {
    Decimal__default["default"].set({ precision: val });
}
/**
 * 将安全金额的字符串还原回原始数字字符串，方便和后续的 decimal 计算
 * @param safeCurrency 安全金额的字符串
 * @returns 去除掉其他符号的数字字符串
 */
function getSafeCurrency(safeCurrency) {
    if (!safeCurrency) {
        return '0';
    }
    if (lodash.isString(safeCurrency)) {
        if (safeCurrency === '--') {
            return '0';
        }
        const number = new Decimal__default["default"](safeCurrency.trim());
        if (isNaN(number.toNumber())) {
            return '0';
        }
        return number.toString();
    }
    return safeCurrency;
}
/** 将值安全转换为 Decimal 数据 */
function getSafeDecimal(value) {
    if (value instanceof Decimal__default["default"]) {
        return value;
    }
    if (!value) {
        return new Decimal__default["default"](0);
    }
    if (typeof value === 'string') {
        return new Decimal__default["default"](getSafeCurrency(value));
    }
    return new Decimal__default["default"](value);
}
/**
 * 添加安全的计算工具
 */
const SafeCalcUtil = {
    mul(a, b) {
        return getSafeDecimal(a).mul(getSafeDecimal(b));
    },
    div(a, b) {
        return getSafeDecimal(a).div(getSafeDecimal(b));
    },
    add(a, b) {
        return getSafeDecimal(a).add(getSafeDecimal(b));
    },
    sub(a, b) {
        return getSafeDecimal(a).sub(getSafeDecimal(b));
    },
};

exports.SafeCalcUtil = SafeCalcUtil;
exports.getSafeCurrency = getSafeCurrency;
exports.getSafeDecimal = getSafeDecimal;
exports.setPrecision = setPrecision;
